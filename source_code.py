from transformers import AutoModelForCausalLM, AutoTokenizer, BitsAndBytesConfig
import torch

torch_device = "cuda" if torch.cuda.is_available() else "cpu"

quantization_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_compute_dtype=torch.float16
)

print(f"Torch device: {torch_device}")

tokenizer = AutoTokenizer.from_pretrained("./architecture-model2")
print('==================Finished Loading Tokenizer========================')

# https://huggingface.co/docs/transformers/perf_infer_gpu_many. Fixes problem of waiting too long to run.
model =  AutoModelForCausalLM.from_pretrained("./architecture-model2", pad_token_id=tokenizer.eos_token_id, quantization_config=quantization_config)
print('==================Finished Loading Model========================')

# input_text = 'Title: User Interface for Product Reviews.\nDescription: Develop a user interface component that displays product reviews and ratings to users.\nPrecondition: Users must be registered and logged in to access product reviews.\nPostcondition: Users can view and interact with product reviews and ratings.\nSequence: Users navigate to a product page. The user interface component displays product reviews and ratings retrieved from the database. Users can leave their own reviews and ratings for the product.\nSoftware Architecture Pattern: '
# input_text = 'Title: Supply Chain Management System\nDescription: Develop a system for managing and optimizing the supply chain processes of a retail company, including inventory tracking, order processing, and supplier management.\nPrecondition: The software must be operational at all times, ensuring a reliable and secure connection to the internet for real-time data updates. It should also integrate seamlessly with existing ERP systems used by the company.\nPostcondition: Supply chain managers can efficiently track inventory levels, process orders, and manage supplier relationships in real-time, leading to improved operational efficiency and reduced costs.\nSequence: Authorized users log in to the supply chain management system using secure credentials. They can then perform actions such as checking current inventory levels, placing orders, and reviewing supplier performance. The system should also generate real-time alerts for critical inventory levels and facilitate data-driven decision-making.\nSoftware Architecture Pattern: '
# input_text = 'Title: Employee Performance Management System\nDescription: Develop a system for assessing and managing employee performance, including goal setting, performance reviews, and skill development.\nPrecondition: The software must be accessible to all employees and managers, ensuring data privacy and security. It should integrate with HR databases for up-to-date employee information.\nPostcondition: Managers can efficiently set and monitor employee goals, conduct performance reviews, and identify skill gaps, leading to improved employee development and organizational success.\nSequence: Authorized users log in to the performance management system using secure credentials. They can then set performance goals, provide feedback, and track employee progress. The system should also generate reports for HR analytics and decision-making.\nSoftware Architecture Pattern: '
# input_text = "Title: 'Learning Management System (LMS)'\nDescription: 'Develop a system for educational institutions to manage online courses, track student progress, and facilitate communication between instructors and learners.'\nPrecondition: 'The software must support a large number of concurrent users, provide secure access to course materials, and integrate with authentication systems used by educational institutions.'\nPostcondition: 'Instructors can create and manage courses, track student performance, and communicate effectively, leading to an enriched online learning experience.'\nSequence: 'Authorized users log in to the Learning Management System, create or enroll in courses, access course materials, and engage in discussions. The system should also generate progress reports and facilitate assessment activities.'\nSoftware Architecture Pattern: "
# input_text = "Title: 'Online Banking System'\nDescription: 'Develop a secure and user-friendly online banking system that allows customers to manage their accounts, transfer funds, and access financial information.'\nPrecondition: 'The software must ensure the confidentiality and integrity of customer data, integrate with banking APIs for transaction processing, and provide multi-factor authentication for user access.'\nPostcondition: 'Customers can securely manage their accounts, perform fund transfers, and access real-time financial information, leading to enhanced online banking experiences.'\nSequence: 'Authorized users log in to the online banking system, view account balances, initiate fund transfers, and receive real-time transaction alerts. The system should also provide a secure messaging system for customer support.'\nSoftware Architecture Pattern: "
# input_text = "Title: 'E-health Monitoring System'\nDescription: 'Develop a system for monitoring and managing health data from wearable devices, providing real-time insights to healthcare professionals and patients.'\nPrecondition: 'The software must securely collect and transmit health data from wearable devices, integrate with electronic health record systems, and ensure data privacy compliance.'\nPostcondition: 'Healthcare professionals can access real-time health data, track patient well-being, and make informed decisions, leading to proactive healthcare management.'\nSequence: 'Wearable devices transmit health data to the E-health Monitoring System, authorized healthcare professionals access the platform to review patient data, and patients receive personalized health recommendations. The system should also generate automated alerts for critical health indicators.'\nSoftware Architecture Pattern: "
# input_text = "Title: 'Project Management Tool'\n Description: 'Develop a comprehensive project management tool to facilitate collaboration among team members, track project progress, and manage tasks efficiently.'\n Precondition: 'The software must provide secure user authentication, support real-time collaboration, and integrate with popular third-party project management tools for seamless data sharing.'\n Postcondition: 'Project teams can collaboratively manage tasks, track project milestones, and improve overall project efficiency, leading to successful project delivery.'\n Sequence: 'Authorized users log in to the project management tool, create and assign tasks, monitor project progress in real-time, and receive notifications for important updates. The system should also generate detailed project reports and support integration with external tools such as version control systems.'\nSoftware Architecture Pattern: "
# input_text = "Title: 'E-commerce Analytics Platform'\nDescription: 'Develop a data analytics platform for e-commerce businesses to analyze customer behavior, track sales trends, and make data-driven decisions.'\nPrecondition: 'The software must integrate with e-commerce databases, provide secure access controls, and support real-time data processing for up-to-date analytics.'\nPostcondition: 'Business analysts can generate comprehensive reports, track key performance indicators, and derive actionable insights, leading to improved business strategies and decision-making.'\nSequence: 'Authorized users log in to the analytics platform, select data sources, customize analytics parameters, and generate reports. The system should also support automated data refresh and allow for seamless integration with popular e-commerce platforms.'\nSoftware Architecture Pattern: "
# input_text = "Title: 'Inventory Management System'\n Description: 'Develop an inventory management system for a retail business, enabling real-time tracking of product stock, automated reordering, and integration with supplier systems.'\n Precondition: 'The software must support concurrent access by multiple users, ensure secure communication with supplier APIs, and integrate seamlessly with the existing enterprise resource planning (ERP) system.'\n Postcondition: 'Inventory managers can efficiently monitor stock levels, automate reordering processes, and receive real-time updates, leading to improved inventory control and cost-effectiveness.'\n Sequence: 'Authorized users log in to the inventory management system, check stock levels, place automated reorder requests, and receive notifications for low inventory. The system should also generate reports on product turnover and supplier performance.'\nSoftware Architecture Pattern: "
input_text = "Title: 'Customer Support Ticketing System'\n Description: 'Develop a customer support ticketing system for managing and resolving customer inquiries, integrating with various communication channels and providing real-time updates.'\n Precondition: 'The software must support high concurrency for simultaneous customer interactions, integrate with email and social media channels, and ensure secure access controls to protect sensitive customer data.'\n Postcondition: 'Customer support teams can efficiently manage and resolve customer inquiries, track communication history, and provide timely responses, leading to enhanced customer satisfaction.'\n Sequence: 'Authorized users log in to the ticketing system, receive and assign support tickets, communicate with customers through various channels, and track the resolution process. The system should also generate reports on ticket status, response times, and customer feedback.'\nSoftware Architecture Pattern: "

model_inputs = tokenizer(input_text, return_tensors='pt').to(torch_device)
print('==================Finished Tokenizing Input========================')

# https://huggingface.co/docs/transformers/perf_infer_gpu_many. Fixes problem of waiting too long to run.
with torch.backends.cuda.sdp_kernel(enable_flash=True, enable_math=False, enable_mem_efficient=False):
    output = model.generate(**model_inputs, do_sample=True, top_k=0, max_new_tokens=190, temperature=0.85, repetition_penalty= 1.13, eos_token_id=tokenizer.eos_token_id, bos_token_id=tokenizer.bos_token_id)
print('==================Finished Generating Ids========================')

print(tokenizer.decode(output[0], skip_special_tokens=True))